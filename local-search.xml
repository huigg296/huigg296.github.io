<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VMware虚拟机网络无法连接问题解决办法</title>
    <link href="/post/20220930.html"/>
    <url>/post/20220930.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-经过"><a href="#1-经过" class="headerlink" title="1.经过"></a>1.经过</h2><p>最近在用VMware玩耍。前两天在安装了python3.8和pip后，把虚拟机挂起，在物理机上学习python语法。一段时间后重新打开虚拟机，发现Ubuntu预置的firefox浏览网页报错，显示“安全连接失败”。怀疑是浏览器的问题，Google后各种修改浏览器配置选项也无法解决。于是蠢蠢地准备将重装firefox，发现执行<code>sudo apt update</code>时报错，显示域名无法解析。又发现Ubuntu上chrome也无法浏览网页，这时才检查发现是虚拟机网络的问题。</p><p>在发现问题后，翻阅了很多博客，不断尝试，最终在<a href="https://blog.csdn.net/leadingsci/article/details/80873542">这篇博客</a>上找到解决办法。虚拟机终于可以联网了，好耶! Y(^_^)Y</p><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><p>linux 设置&gt;界面 显示”未发现Wi-Fi适配器“，且 设置&gt;网络 中没有有线连接选项。</p><p><img src="/.%5CVMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%5Cerror.png" alt="Network Error"></p><h2 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3.解决办法"></a>3.解决办法</h2><h3 id="尝试一："><a href="#尝试一：" class="headerlink" title="尝试一："></a>尝试一：</h3><p>一开始，我几乎是病急乱投医。直接搜索”VMware 找不到wifi适配器“寻找解决方法。找到一篇<a href="https://zhuanlan.zhihu.com/p/269139018?utm_source=wechat_session&utm_medium=social&utm_oi=1187090292599066624&utm_campaign=shareopn">《万能的VMware虚拟机连接不上的解决方法》</a>，并没有仔细分析问题是否相同，便按现成的解决方法去莽。结果自然是：无论尝试几次，重启几次，网络依然无法连接。我又找了许多其他博客，介绍的解决方案基本大同小异，尝试后依旧无果。</p><h3 id="尝试二："><a href="#尝试二：" class="headerlink" title="尝试二："></a>尝试二：</h3><p>由于安装虚拟机时我几乎一窍不通，所以我记不得当时是如何配置网络环境的。几番回忆下，我找到了那篇<a href="https://segmentfault.com/a/1190000024580532">Vmware网络配置教程</a>。我的虚拟机是用NAT模式联网的，即与宿主机组成小局域网，通过宿主机访问互联网。这种联网方式下，虽然虚拟机连接的是无线网络，但是设置中显示的是连接有线网络。</p><p>了解了问题大致样貌后，我再去寻找方法，终于找到一篇<a href="https://blog.csdn.net/leadingsci/article/details/80873542">《ubunt18.04虚拟机突然无法上网解决方法》</a>，其中的解决方法大致思路是初始化网路管理器。其提供的解决方法尝试如下：</p><p>1.将模式调整为”主机模式“</p><p>2.输入以下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service network-manager stop<br><br>sudo rm -i /var/lib/NetworkManager/NetworkManager.state<br><br>sudo service network-manager start<br></code></pre></td></tr></table></figure><p>命令行输入以上短短三行命令后，问题就基本解决了。虚拟机重启后，终于连上了网络！</p><h2 id="4-心得"><a href="#4-心得" class="headerlink" title="4.心得"></a>4.心得</h2><p>虽然问题解决了，但问题发生的具体原因依然不得而知，而且我并不完全了解解决方案的原理。下次发生问题时，可能还要再花一晚上功夫寻找解决方法。但这些付出还是值得的，我收获了很多经验，最后解决问题时的愉悦心情也是很棒的体验。</p><p>希望随着自己不断学习、实践，将来能对这个问题有更好的理解。加油吧。</p><h2 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5.参考文献"></a>5.参考文献</h2><p>&lt;1&gt; <a href="https://www.cnblogs.com/Courage129/p/14287850.html">《NAT模式、路由模式、桥接模式的区别 - 等不到的口琴 - 博客园》</a></p><p>&lt;2&gt; <a href="https://segmentfault.com/a/1190000024580532">《VmWare网络配置，只此一篇就够了》</a></p><p>&lt;3&gt; <a href="https://zhuanlan.zhihu.com/p/269139018?utm_source=wechat_session&utm_medium=social&utm_oi=1187090292599066624&utm_campaign=shareopn">《万能的VMware虚拟机连接不上的解决方法》</a></p><p>&lt;4&gt; <a href="https://blog.csdn.net/leadingsci/article/details/80873542">0058-【linux系统】-ubunt18.04虚拟机突然无法上网解决方法_伍泳彰的博客-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Python爬取网络数据到Excel</title>
    <link href="/post/20220926.html"/>
    <url>/post/20220926.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h2><h3 id="1-1-说明"><a href="#1-1-说明" class="headerlink" title="1.1 说明"></a>1.1 说明</h3><p>近来笔者在浅尝python网络爬虫，这是笔者写的第一个爬虫程序，仅仅是一步步按参考书的教程写成。写这篇博客仅为备忘用，没有什么技术含量，如果能对你有所帮助，那也再好不过。</p><p>我们以爬取<a href="https://www.kugou.com/yy/rank/home/1-8888.html">酷狗歌曲TOP500</a>为例，获取网页上显示的TOP500的歌曲名、歌手、歌曲时长，并将结果输出到一个Excel表格中。</p><h3 id="1-2-环境与准备"><a href="#1-2-环境与准备" class="headerlink" title="1.2 环境与准备"></a>1.2 环境与准备</h3><ul><li><p>Ubuntu 18.04</p></li><li><p>python 3.8</p></li><li><p>python库：Requests，BeautifulSoup4</p></li><li><p>chrome &#x2F; firefox浏览器</p></li><li><p>一双敲代码的小手</p></li><li><p>一个不畏bug的大心脏</p></li></ul><h2 id="2-HTML爬取"><a href="#2-HTML爬取" class="headerlink" title="2. HTML爬取"></a>2. HTML爬取</h2><p>第一步就是直接步入主题，用程序请求网站获取网页html文件。我们要做的事情就是：</p><ol><li><p>加入请求头来伪装成浏览器</p></li><li><p>向目标网站发送http请求</p></li><li><p>获取服务器响应的html文件</p></li></ol><p>应用“让HTTP服务人类”的Requests库，我们能够用一行代码实现这些操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span><br>&#125;<br>wb_data = requests.get(<span class="hljs-string">&#x27;https://www.kugou.com/yy/rank/home/1-8888.html&#x27;</span>,headers=headers)<br></code></pre></td></tr></table></figure><p>其中，请求头可以从chrome浏览器的 开发者工具 &gt; 网络 中查询。如此我们便获得了酷狗TOP500第一页的html文档，可以用<code>print(wb_data.text)</code>查看其内容。</p><p>有些网站具备反爬机制，这时print出来的结果可能是缺斤少两、奇奇怪怪的，这时就需要爬虫与反爬虫进行更高级的智斗了。所幸酷狗网页并没有反爬机制，我们可以很愉快地获取网页内容。</p><p>插一句，如果要爬取国外的网站，得先保证网络能够使浏览器正常访问网站，没有vpn的话可能会报错。</p><h2 id="3-HTML解析"><a href="#3-HTML解析" class="headerlink" title="3. HTML解析"></a>3. HTML解析</h2><p>但是，我们得到的html文档内容太复杂了，真是看得人头大，我们怎样才能从这些奇怪的标记中找到我们需要的信息呢？</p><p>这时就该BeautifulSoup库派上用场啦，它可以对HTML&#x2F;XML文档进行解析，将网页源代码解析为Soup文档，以便过滤提取数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>soup = BeautifulSoup(wb_data.text,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这时再进行<code>print(soup.prettify())</code>可以看到解析后的Soup文档，看上去与原来的html文档没什么不同，但通过BeautifulSoup解析得到的Soup文档按章标准缩进格式的结构输出，为结构化数据的过滤提取做好准备。</p><h2 id="4-数据提取"><a href="#4-数据提取" class="headerlink" title="4. 数据提取"></a>4. 数据提取</h2><p>终于到最重要的数据提取了。我们需要的数据到底在哪里？我们怎样把它们提取出来？</p><p>这里以提取“歌曲名称”为例，用chrome浏览器开发者工具中的“检查元素”功能，我们可以找到歌曲名称属标签在html文档的位置。鼠标右击标签，选择复制selector，这就是“歌曲名称”所属标签在html中的定位（好像也是用CSS制作样式时的定位方式）。</p><p>注意：将<code>li:nth-child(1)</code>中的伪类删去，即改为<code>li</code>，以获得整个页面22个歌曲名称。</p><p>接着我们就可以用BeautifulSoup中的<code>select()</code>方法找到“歌曲名称”在Soup文档中的位置，用<code>get_text()</code>方法获取title属性中的文本（也可以用<code>get()</code>方法获取其他属性值），再进行字符串处理，就可以得到“歌曲名称”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">titles = soup.select(<span class="hljs-string">&#x27;#rankWrap &gt; div.pc_temp_songlist &gt; ul &gt; li &gt; a&#x27;</span>)<br><span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> titles:<br>    data = &#123;<br>        <span class="hljs-string">&#x27;song&#x27;</span>:title.get_text(strip=<span class="hljs-literal">True</span>).split(<span class="hljs-string">&#x27;-&#x27;</span>)[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><p>注：这里发现，在html中，title属性值为“歌手-歌曲名称”，但在使用方法<code>get_text()</code>后，提取出内容为“歌曲名称-歌手”。目前不清楚原因，之后可能要去翻阅下官方文档。</p><h2 id="5-导入Excel"><a href="#5-导入Excel" class="headerlink" title="5. 导入Excel"></a>5. 导入Excel</h2><p>最后我们将提取到的数据导入到Excel表格中。这里只需要用到openpyxl库，就能够轻松实现工作簿编辑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br>workbook = Workbook()<br>sheet = workbook.active<br>row = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> titles:<br>    row += <span class="hljs-number">1</span><br>    sheet[<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-built_in">str</span>(row)].value = title.get_text(strip=<span class="hljs-literal">True</span>).split(<span class="hljs-string">&#x27;-&#x27;</span>)[<span class="hljs-number">0</span>]<br>workbook.save(<span class="hljs-string">&#x27;songs_TOP500.xlsx&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行后发现当前目录下出现一个名为“songs_TOP500.xlsx”的xlsx文件，工作表中A列记录了歌曲名称。</p><h2 id="6-最终代码与运行结果"><a href="#6-最终代码与运行结果" class="headerlink" title="6. 最终代码与运行结果"></a>6. 最终代码与运行结果</h2><h3 id="6-1-在最终代码前"><a href="#6-1-在最终代码前" class="headerlink" title="6.1 在最终代码前"></a>6.1 在最终代码前</h3><p>基本工作已经完成，现在只需注意两点：</p><ol><li><p>TOP500在23个网页html上，需根据url特点构造url列表，爬取这23个页面；</p></li><li><p>每次爬取网页需暂停0.5~1s，防止请求过快，触发网站的反爬程序</p></li></ol><h3 id="6-2-最终代码（仅供参考）"><a href="#6-2-最终代码（仅供参考）" class="headerlink" title="6.2 最终代码（仅供参考）"></a>6.2 最终代码（仅供参考）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 2022.9.28</span><br><span class="hljs-comment"># 根据参考书上样例爬取酷狗Top500的歌手、歌名和歌曲时长等信息</span><br><br><span class="hljs-comment"># 必要库调用</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 伪装浏览器请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0Safari/537.36&quot;</span><br>&#125;<br>workbook = Workbook()<br>sheet = workbook.active<br>columns = [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>]<br>row = <span class="hljs-number">0</span><br><br><br><span class="hljs-comment"># 定义获取信息的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_info</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment"># 爬取网页</span><br>    wb_data = requests.get(url, headers=headers)<br>    soup = BeautifulSoup(wb_data.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    <span class="hljs-comment"># 提取信息</span><br>    ranks = soup.select(<span class="hljs-string">&#x27;#rankWrap &gt; div.pc_temp_songlist &gt; ul &gt; li &gt; span.pc_temp_num&#x27;</span>)<br>    titles = soup.select(<span class="hljs-string">&#x27;#rankWrap &gt; div.pc_temp_songlist &gt; ul &gt; li &gt; a&#x27;</span>)<br>    times = soup.select(<span class="hljs-string">&#x27;#rankWrap &gt; div.pc_temp_songlist &gt; ul &gt; li &gt; span.pc_temp_tips_r &gt; span&#x27;</span>)<br><br>    <span class="hljs-comment"># 调整输出</span><br>    <span class="hljs-keyword">for</span> rank, title, time <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(ranks, titles, times):<br>        data1 = rank.get_text().strip()<br>        data2 =  title.get_text(strip=<span class="hljs-literal">True</span>).split(<span class="hljs-string">&#x27;-&#x27;</span>)[<span class="hljs-number">1</span>]<br>        data3 = title.get_text(strip=<span class="hljs-literal">True</span>).split(<span class="hljs-string">&#x27;-&#x27;</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 发现get_text()后，歌手和歌名顺序颠倒，原因未知</span><br>        data4 = time.get_text().strip()<br>        listemp = [data1,data2,data3,data4]<br>        data = &#123;<br>            <span class="hljs-string">&#x27;rank&#x27;</span>: data1,<br>            <span class="hljs-string">&#x27;singer&#x27;</span>: data2,<br>            <span class="hljs-string">&#x27;song&#x27;</span>: data3,<br>            <span class="hljs-string">&#x27;time&#x27;</span>: data4<br>        &#125;<br>        <span class="hljs-built_in">print</span>(data)<br>        <span class="hljs-comment">#写入Excel</span><br>        <span class="hljs-keyword">global</span> row<br>        row += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> col, temp <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(columns, listemp):<br>            sheet[col+<span class="hljs-built_in">str</span>(row)].value = temp<br><br><br><span class="hljs-comment"># 程序主入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    urls = [<span class="hljs-string">&#x27;https://www.kugou.com/yy/rank/home/&#123;&#125;-8888.html&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(i))<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">24</span>)]<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        get_info(url)<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>    workbook.save(<span class="hljs-string">&#x27;songs_TOP500.xlsx&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="6-3-运行结果"><a href="#6-3-运行结果" class="headerlink" title="6.3 运行结果"></a>6.3 运行结果</h3><p><img src="/.%5C%E7%94%A8Python%E7%88%AC%E5%8F%96%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%88%B0Excel%5CExcel%E5%AF%BC%E5%85%A5%E6%88%90%E5%8A%9F.png" alt="Excel导入成功"></p><p><img src="/.%5C%E7%94%A8Python%E7%88%AC%E5%8F%96%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%88%B0Excel%5C%E5%AD%97%E5%85%B8%E8%BE%93%E5%87%BA%E6%88%90%E5%8A%9F.png" alt="字典输出成功"></p><h2 id="7-参考文献"><a href="#7-参考文献" class="headerlink" title="7. 参考文献"></a>7. 参考文献</h2><p>[1]<a href="https://book.douban.com/subject/27180929/">罗攀,蒋仟.《从零开始学python网络爬虫》.机械工业出版社.2017：1-44</a></p><p>[2]<a href="https://www.jianshu.com/p/1977605177f9">Python 爬虫并且将数据写入Excel</a></p><p>[3]<a href="https://openpyxl.readthedocs.io/en/stable/tutorial.html">openpyxl库官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
